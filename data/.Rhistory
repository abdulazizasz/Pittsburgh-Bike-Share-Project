week.merge$Weekday <- weekdays(as.Date(week.merge$Startdate))
View(tag.stop)
# StopWeekday
tag.week.Stop <- as.data.frame(str_split_fixed(week.merge$StopTime, " ", 2))
week.merge$Stopdate <- gsub("/", "-", tag.week.Stop$V1)
tag.week.Stop2 <- as.data.frame(str_split_fixed(week.merge$Stopdate, "-", 3))
library(stringr)
tag.week.Stop2$V1 <- str_pad(tag.week.Stop2$V1, 2, pad = "0")
week.merge$Stopmonth <- tag.week.Stop2$V1
tag.week.Stop2$V2 <- str_pad(tag.week.Stop2$V1, 2, pad = "0")
week.merge$Stopday <- tag.week.Stop2$V2
week.merge$Stopdate <- paste(week.merge$Stopmonth, "-", week.merge$Stopday, "-", week.merge$Startyear)
week.merge$Stopdate <- gsub(" ", "", week.merge$Stopdate)
week.merge$Weekday2 <- weekdays(as.Date(week.merge$Stopdate))
week.merge2 <- week.merge[, c(1,8,12)]
##' Weekday - StartWeek
##' Weekday2 - StopWeek
# merge week.merge2 and rental_total
rental_total <- merge(rental_total, week.merge2, by.x = "TripId", by.y = "TripId")
View(rental_total)
#' ----------------------------------------------------------------------
#' Edit-End: add a Weekday attribute, delete Day attribute
#' ----------------------------------------------------------------------
#' Extract Rental Stop Data
rental_total_stop <- rental_total[, c(5,6,12,13,15,18)]
head(rental_total_stop)
#' Merge above with Station Data - Left outer join on "ToStationID"
rentalstop_final <- merge(rental_total_stop, stn_data, by.x = "ToStationId", by.y = "StationNum", all.x = TRUE)
head(rentalstop_final)
rentalstop_final <- rentalstop_final[, c(1,2,3,4,5,6,8)]
head(rentalstop_final)
#' Create data frame with group and "Count" variable
rentalstop_counts <- data.frame(table(rentalstop_final$ToStationId,rentalstop_final$UserType, rentalstop_final$StopMonth,rentalstop_final$StopDay,rentalstop_final$StopHour, rentalstop_final$Weekday2 ,rentalstop_final$RackQnty))
head(rentalstop_counts)
colnames(rentalstop_counts) <- c("ToStationId","StopUserType","StopMonth","StopDay","StopHour","StopWeekday","StopRackQnty","StopCount")
head(rentalstop_counts)
View(rentalstop_counts)
View(rentalstop_final)
View(rentalstop_counts)
View(rentalstop_counts)
#' Maximum vehicles returned on a given month, day and hour at a particular station
rentalstop_counts[which.max(rentalstop_counts$StopCount),]
#' Extract Rental Start Data
rental_total_start <- rental_total[, c(1,2,3,4,6,7,8,10,17)]
#' Merge above with Station Data - Left outer join on "FromStationID"
rentalstart_final <- merge(rental_total_start, stn_data, by.x = "FromStationId", by.y = "StationNum", all.x = TRUE)
#' Create data frame with group and "Count" variable
rentalstart_counts <- data.frame(table(rentalstart_final$FromStationId,rentalstart_final$UserType, rentalstart_final$StartMonth,rentalstart_final$StartDay,rentalstart_final$StartHour,rentalstart_final$Weekday,rentalstart_final$RackQnty ))
head(rentalstart_counts)
colnames(rentalstart_counts) <- c("FromStationId","StartUserType","StartMonth","StartDay","StartHour","StartWeekday","StartRackQnty","StartCount")
View(rentalstart_final)
head(rentalstart_counts)
#' Maximum vehicles returned on a given month, day and hour at a particular station
rentalstart_counts[which.max(rentalstart_counts$StartCount),]
#' merge two count data set into one
start_row_to_keep = which(rentalstart_counts$StartCount > 0)
rentalstart_counts <- rentalstart_counts[start_row_to_keep,]
head(rentalstart_counts)
stop_row_to_keep = which(rentalstop_counts$StopCount > 0)
rentalstop_counts <- rentalstop_counts[stop_row_to_keep,]
head(rentalstop_counts)
final_total <- merge(rentalstart_counts,rentalstop_counts, by.x = "FromStationId", by.y = "ToStationId")
str(final_total)
final_total$StartMonth <- as.numeric(final_total$StartMonth)
final_total$StopMonth <- as.numeric(final_total$StopMonth)
## Hour_row_to_keep <- which(final_total$StartHour == final_total$StopHour)
Month_row_to_keep <- which(final_total$StartMonth == final_total$StopMonth)
final_total.2 <- final_total[Month_row_to_keep,]
Day_row_to_keep <- which(final_total.2$StartDay == final_total.2$StopDay)
final_total.2 <- final_total.2[Day_row_to_keep,]
## final_total.2 <- final_total[Hour_row_to_keep,]
head(final_total.2)
final_total.2 <- final_total.2[,c(1,2,3,4,5,6,7,8,9,12,13,15)]
head(final_total.2)
#' the count of in and out on the same day. "+":in; "-":out.
final_total.2$Count <- final_total.2$StopCount - final_total.2$StartCount
head(final_total.2)
final_total.2 <- final_total.2[,-c(5,8,10,11,12)]
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
final_total.2$RackQnty <- as.numeric.factor(final_total.2$RackQnty)
final_total.2$StartDay <- as.numeric(final_total.2$StartDay)
final_total.2$FromStationId <- as.numeric(final_total.2$FromStationId)
final_total.2$StartUserType <- as.numeric(final_total.2$StartUserType)
final_total.2$StartWeekday.n <- as.numeric(final_total.2$StartWeekday)
final_total.2$StopUserType <- as.numeric(final_total.2$StopUserType)
final_total.2$StartWeekday = NULL
final_total.2$StopUserType = NULL
y = final_total.2$Count
final_total.2 = cbind(y=y, final_total.2)
final_total.2$Count = NULL
str(final_total.2)
library(plyr)
library(plyr)
names(final_total.2)[names(final_total.2)=="FromStationId"] <- "StationId"
names(final_total.2)[names(final_total.2)=="StartUserType"] <- "UserType"
names(final_total.2)[names(final_total.2)=="StartMonth"] <- "Month"
names(final_total.2)[names(final_total.2)=="StartRackQnty"] <- "RackQnty"
names(final_total.2)[names(final_total.2)=="StartWeekday.n"] <- "Weekdays"
head(final_total.2)
##' Because the StartHour and StopHour of every trip between training and testing set
##'  cannot be exactly the same, so I delete these two column, but I will use "Hour" attribute
##'  as an important factor to decide what time (A time period in a day) is the best period
##'  to retransfer the bikes, just as "density plot based on StartHour" showed.
# final_total.2$y <- as.factor(final_total.2$y)
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
View(training)
View(testing)
View(training)
View(testing)
View(training)
library(lubridate)
library(dplyr)
library(ggplot2)
## Read The data
### stations data
stations <- read.csv("HealthyRideStations2015.csv")
## 2015 Q3
rentalQ153 <- read.csv("HealthyRideRentals 2015 Q3.csv",na.strings= c("999", "NA", " ", ""))
### Change the data
rentalQ153$StartTime <- strptime(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
rentalQ153$StopTime <- strptime(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StartTime <- as.POSIXct(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StopTime <- as.POSIXct(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
## 2015 Q4
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRideRentals 2015 Q4.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
# numSheets <- sheetCount(excelFile, verbose=TRUE)
#
# for ( i in 1:numSheets) {
#   mySheet <- read.xls(excelFile, sheet=i)
#   write.csv(mySheet, file=paste(i, "csv", sep="."), row.names=FALSE)
# }
rentalQ154 <- read.csv("HealthyRideRentals 2015 Q4.csv", na.strings= c("999", "NA", " ", ""))
rentalQ154$StartTime <- strptime(rentalQ154$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ154$StopTime <- strptime(rentalQ154$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ154$StartTime <- as.POSIXct(rentalQ154$StartTime)
# rentalQ154$StopTime <- as.POSIXct(rentalQ154$StopTime)
## 2016 Q1
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRide Rentals 2016 Q1.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
#
#
# mySheet <- read.xls(excelFile)
# write.csv(mySheet, file=paste("HealthyRide Rentals 2016 Q1","csv", sep="."), row.names=FALSE)
rentalQ161 <- read.csv("HealthyRide Rentals 2016 Q1.csv", na.strings= c("999", "NA", " ", ""))
## Make sure they have the same colunm names
names(rentalQ161) <- c(names(rentalQ153))
rentalQ161$StartTime <- strptime(rentalQ161$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ161$StopTime <- strptime(rentalQ161$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Starttime <- as.POSIXct(rentalQ161$Starttime,format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Stoptime <- as.POSIXct(rentalQ161$Stoptime,format="%Y-%m-%d %H:%M:%S")
## binding the data together
bike <- rbind(rentalQ153,rentalQ154,rentalQ161)
bike$TripId <- as.factor(bike$TripId)
bike$BikeId <- as.factor(bike$BikeId)
bike$FromStationId <- as.factor(bike$FromStationId)
bike$ToStationId <- as.factor(bike$ToStationId)
## Splitting the date
# bike <- bike %>% mutate(
#   year = format(as.POSIXct(StartTime), format = "%Y"),
#   month = format(as.POSIXct(StartTime), format = "%m"),
#   day = format(as.POSIXct(StartTime), format = "%d"),
#   hour = format(as.POSIXct(StartTime), format= "%H")
# )
set_up_features <- function(df) {
### Start Time
df$StartTime <- strptime(df$StartTime, format="%Y-%m-%d %H:%M:%S")
df$StartHour <- as.factor(df$StartTime$hour)
df$StartDay <-  as.factor(df$StartTime$mday)
df$StartWday <- as.factor(df$StartTime$wday)
df$StartMonth <- as.factor(df$StartTime$mon+1) ## starts from 0
df$StartYear <- as.factor(df$StartTime$year + 1900)
### Stop Time
df$StopTime <- strptime(df$StopTime, format="%Y-%m-%d %H:%M:%S")
df$StopHour <- as.factor(df$StopTime$hour)
df$StopDay <-  as.factor(df$StopTime$mday)
df$StopWday <- as.factor(df$StopTime$wday)
df$StopMonth <- as.factor(df$StopTime$mon+1) ## starts from 0
df$StopYear <- as.factor(df$StopTime$year + 1900)
df
}
bike <- set_up_features(bike)
## Make a summeary for the missing values
na_data <- sapply(bike, function(x) sum(length(which(is.na(x)))))
na_data
bike$FromStationName[which(is.na(bike$FromStationId))]
bike$FromStationId[which(is.na(bike$FromStationName))]
## I guss we should just drop them
detach("package:plyr", unload=TRUE)
### Remove all NA values
bike <- na.omit(bike)
## Remove the station "Transit" and "Healthy Ride Hub"
## 687
bike %>%
select(TripId, FromStationId) %>%
filter(FromStationId %in% c(1050,1051)) %>%
summarise(n())
## 790
bike %>%
select(TripId, ToStationId) %>%
filter(ToStationId %in% c(1050,1051)) %>%
summarise(n())
### Drop these values
bike <- bike[!bike$FromStationId %in% c(1050,1051) & !bike$ToStationId %in% c(1050,1051),]
# # weather$DATE <- as.factor(weather$DATE$year + 1900)
# set_up_featuresDate <- function(df) {
#   df$day <-  as.factor(df$date$mday)
#   df$month <- as.factor(df$date$mon+1) ## starts from 0
#   df$year <- as.factor(df$date$year + 1900)
#   df
# }
#
# weather <- set_up_featuresDate(weather)
# weather <- weather[,-1]
# bike1 <- merge(weather, bike, by = c("day","month","year"))
# bike1 <- join(bike, weather_holidays,  by=c("Day",'Month','Year'), type="inner")
# semi_join(bike, weather)
## Write a csv file "bike.csv"
write.csv(bike, file = "./bike.csv", row.names = FALSE)
##################### This Section is to make exploratory graph #######################
## Trying to make some useful graphs
newBike <- bike
## Delete the row that has month 6
newBike <- newBike[!newBike$StartMonth==6,]
newBike$StartHour <- as.numeric(levels(newBike$StartHour))[newBike$StartHour]
newBike$StartDay <- as.numeric(levels(newBike$StartDay))[newBike$StartDay]
#newBike$StartMonth <- as.numeric(levels(newBike$StartMonth))[newBike$StartMonth]
#newBike$StartYear <- as.numeric(levels(newBike$StartYear))[newBike$StartYear]
newBike$StopHour <- as.numeric(levels(newBike$StopHour))[newBike$StopHour]
newBike$StopDay <- as.numeric(levels(newBike$StopDay))[newBike$StopDay]
#newBike$StopMonth <- as.numeric(levels(newBike$StopMonth))[newBike$StopMonth]
#newBike$StopYear <- as.numeric(levels(newBike$StopYear))[newBike$StopYear]
### The Dirstibution of bike rented per hours
ggplot(newBike, aes(StartHour, fill=StartYear))  + ggtitle("Rented Bikes Per Hour") +
labs(x="Hour")  + geom_density(alpha=0.5) +  theme_bw()
### The Dirstibution of bike rented per Day
ggplot(newBike, aes(StartDay, fill=StartMonth))  + ggtitle("Rented Bikes Per Day") +
labs(x="Day")  + geom_histogram(binwidth = 0.5) +  theme_bw() + facet_grid(StartMonth~StartYear)
## For the month
ggplot(newBike, aes(StartMonth, fill = StartYear)) + geom_bar()
##### for Stop time ############
### The Dirstibution of bike rented per hours
ggplot(newBike, aes(StopHour, fill=StopYear))  + ggtitle("Rented Bikes Returned per hour") +
labs(x="Hour")  + geom_density(alpha=0.5) +  theme_bw()
### The Dirstibution of bike rented per Day
ggplot(newBike, aes(StopDay, fill=StopMonth))  + ggtitle("Rented Bikes Returned Per Day") +
labs(x="Day")  + geom_histogram(binwidth = 0.5) +  theme_bw() + facet_grid(StopMonth~StopYear)
## For the month
ggplot(newBike, aes(StopMonth, fill = StopYear)) + geom_bar()
## Calcuate the counts
# by Hour, Day, Month, Year
# inclue the From station Id
starttime <- bike[,c(6,11,12,14,15)]
stoptime <- bike[,c(8,16,17,19,20)]
## Calcuate the counts
# starttime <- count_(starttime, c('StartHour','StartDay','StartMonth','StartYear'))
# stoptime <- count_(stoptime,  c('StopHour','StopDay','StopMonth','StopYear'))
starttime <- starttime %>% count(FromStationId, StartHour,StartDay, StartMonth, StartYear)
stoptime <- stoptime %>% count(ToStationId, StopHour, StopDay, StopMonth, StopYear)
## Aggregation for Hour and FromStationId and ToStationid
# aggregate_starttime_hour <- starttime %>%
#   group_by(FromStationId,StartHour,StartDay,StartMonth,StartYear) %>%
#   summarise_each(funs(sum), n) %>%
#   arrange(StartYear, StartMonth)
aggregate_starttime_hour <- starttime %>%
group_by(StartHour,StartDay,StartMonth,StartYear) %>%
summarise_each(funs(sum), n) %>%
arrange(StartYear, StartMonth)
# aggregate_stoptime_hour <- stoptime %>%
#   group_by(ToStationId,StopHour, StopDay, StopMonth, StopYear) %>%
#   summarise_each(funs(sum), n) %>%
#   arrange(StopYear, StopMonth)
library(plyr)
### Weather
### Holiday column 1 means it is either a holiday or a weekend
### Weekend 1 = yes , 0 = no
## Types 1 = Sunny, 2 = Rain, 3 = Snow
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv", stringsAsFactors = TRUE)
weather_holidays$Day <- as.factor(weather_holidays$Day)
weather_holidays$Month <- as.factor(weather_holidays$Month)
weather_holidays$Year <- as.factor(weather_holidays$Year)
weather_holidays$Holiday <- as.factor(weather_holidays$Holiday)
weather_holidays$Weekend <- mapvalues(weather_holidays$Weekend, from = c('yes','no'), to = c(1,0))
weather_holidays$Types <- mapvalues(weather_holidays$Types, from = c('Sunny','Rain','Snow'), to = c(1,2,3))
### Merge the aggregate_starttime_hour with the holdiay and the weather
### This is just used for the prediction
bike_final <-merge(aggregate_starttime_hour, weather_holidays, by.x = c('StartDay','StartMonth','StartYear'), by.y = c('Day','Month','Year'))
bike_final <- arrange(bike_final,StartYear,StartMonth, StartDay, StartHour)
View(bike_final)
table(bike_final$StartHour)
biketrain<-subset(bike_final,bike_final$StartDay %in% c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19))
train<-as.data.frame(biketrain)
View(train)
bike_final <- arrange(bike_final,StartYear,StartMonth, StartDay, StartHour)
arrange(train, desc(n))
arrange(train, desc(n))[1:3]
arrange(train, desc(n))[1:3,]
arrange(test, desc(n))[1:3,]
arrange(bike_final, desc(n))[1:3,]
biketest<-subset(bike_final,bike_final$StartDay %in% c(20,21,22,23,24,25,26,27,28,29,30,31))
test <- as.data.frame(biketest)
View(test)
arrange(test, desc(n))[1:3,]
ytrain = train$n
ytest = test$n
length(ytrain)
length(ytest)
m1 = lm(n~., data=train)
summary(m1)
str(bike_final)
bike_final$StartHour <- as.numeric(levels(bike_final$StartHour))[bike_final$StartHour]
bike_final$StartDay <- as.numeric(levels(bike_final$StartDay))[bike_final$StartDay]
bike_final$StartMonth <- as.numeric(levels(bike_final$StartMonth))[bike_final$StartMonth]
bike_final$StartYear <- as.numeric(levels(bike_final$StartYear))[bike_final$StartYear]
str(bike_final)
View(bike_final)
biketrain<-subset(bike_final,bike_final$StartDay %in% c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19))
train<-as.data.frame(biketrain)
View(train)
biketest<-subset(bike_final,bike_final$StartDay %in% c(20,21,22,23,24,25,26,27,28,29,30,31))
test <- as.data.frame(biketest)
str(train)
str(test)
ytrain = train$n
ytest = test$n
m1 = lm(n~., data=train)
summary(m1)
table(train$Types)
table(train$Weekend)
summary(m1)
ptest = predict(m1,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
View(prediction_result)
obs = ytest
error = obs-ptest
rmse=sqrt(mean(error^2))
rmse
rmse3 <- function(y, f) { sqrt(mean( (y-f)^2 )) }
rmse3(ytest,ptest)
ggplot(data=prediction_result,aes(x=ptest,y=ytest)) + geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=ytest),color="black") +
geom_line(aes(x=ytest,
y=ytest,color="blue"))
### ploting the residual
ggplot(data=prediction_result,aes(x=ptest,
y=error)) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=error,
color="black"))
View(prediction_result)
prediction_result$error = ytest - ptest
prediction_result$error = ptest - ytest
rm(obs)
rm(error)
ptest = predict(m1,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
ggplot(data=prediction_result,aes(x=ptest,y=ytest)) + geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=ytest),color="black") +
geom_line(aes(x=ytest,
y=ytest,color="blue"))
### ploting the residual
ggplot(data=prediction_result,aes(x=ptest,
y=error)) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=error,
color="black"))
obs = ytest
error = ptest - obs
rmse=sqrt(mean(error^2))
rmse
## RMSE
rmse3 <- function(y, f) { sqrt(mean( (y-f)^2 )) }
rmse3(ytest,ptest)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
plot(m1$residuals ~ m1$fitted.values)
stepAIC(m1, direction="backward")
library(MASS)
library(MASS)
stepAIC(m1, direction="backward")
m2 = lm( n ~ StartMonth + StartYear + StartHour + Mean.Temp + Mean.Visib + Types + Holiday, data = train)
summary(m2)
hist(m2$residuals)
qqnorm(m2$residuals)
qqline(m2$residuals)
plot(m2$residuals ~ m2$fitted.values)
ptest = predict(m2,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
obs = ytest
error = ptest - obs
rmse=sqrt(mean(error^2))
rmse
load("./Downloads/psub.RData")
load("Users/abdulaziz/Downloads/psub.RData")
load("/Users/abdulaziz/Downloads/psub.RData")
str(psub)
summary(m2)
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 3) + poly(Mean.Visib, degree = 2) + Types + Holiday, data = train)
summary(m3)
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 5) + poly(Mean.Visib, degree = 5) + Types + Holiday, data = train)
summary(m3)
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 8) + poly(Mean.Visib, degree = 8) + Types + Holiday, data = train)
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 6) + poly(Mean.Visib, degree = 6) + Types + Holiday, data = train)
summary(m3)
predicted.intervals <- predict(m3,newdata = test ,interval='confidence',
level=0.99)
lines(q,predicted.intervals[,1],col='green',lwd=3)
lines(q,predicted.intervals[,2],col='black',lwd=1)
lines(q,predicted.intervals[,3],col='black',lwd=1)
lines(Mean.Temp,predicted.intervals[,1],col='green',lwd=3)
predicted.intervals <- predict(m3,newdata = test ,interval='confidence',
level=0.99)
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 6) + poly(Mean.Visib, degree = 6) + Types + Holiday, data = train)
ptest = predict(m3,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
obs = ytest
error = ptest - obs
rmse=sqrt(mean(error^2))
rmse
##### Linear regression #####
### Split the data to training and testing
ytrain = train$n
ytest = test$n
m1 = lm(n~., data=train)
summary(m1)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
plot(m1$residuals ~ m1$fitted.values)
ptest = predict(m1,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
obs = ytest
error = ptest - obs
rmse1=sqrt(mean(error^2))
rmse1
## RMSE
rmse3 <- function(y, f) { sqrt(mean( (y-f)^2 )) }
rmse3(ytest,ptest)
#### Plotting
ggplot(data=prediction_result,aes(x=ptest,y=ytest)) + geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=ytest),color="black") +
geom_line(aes(x=ytest,
y=ytest,color="blue"))
### ploting the residual
ggplot(data=prediction_result,aes(x=ptest,
y=error)) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=error,
color="black"))
ggplot(data=prediction_result,aes(x=ptest,y=ytest)) + geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=ptest,
y=ytest),color="black") +
geom_line(aes(x=ytest,
y=ytest,color="blue"))
library(MASS)
### Using AIC
stepAIC(m1, direction="backward")
## Smallest AIC
# Step:  AIC=15691.05
# lm(formula = n ~ StartMonth + StartYear + StartHour + Mean.Temp +
#     Mean.Visib + Types + Holiday, data = train)
m2 = lm( n ~ StartMonth + StartYear + StartHour + Mean.Temp + Mean.Visib + Types + Holiday, data = train)
summary(m2)
hist(m2$residuals)
qqnorm(m2$residuals)
qqline(m2$residuals)
plot(m2$residuals ~ m2$fitted.values)
ptest = predict(m2,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
obs = ytest
error = ptest - obs
rmse2=sqrt(mean(error^2))
rmse2
### Linear regression does not work so we have to test the ploynomial regression
m3 = lm( n ~ StartMonth + StartYear + StartHour + poly(Mean.Temp, degree = 6) + poly(Mean.Visib, degree = 6) + Types + Holiday, data = train)
ptest = predict(m3,newdata=test)
prediction_result <-  data.frame(ytest,ptest)
prediction_result$error = ptest - ytest
obs = ytest
error = ptest - obs
rmse3=sqrt(mean(error^2))
rmse3
barplot(rmse1,rmse2)
hist(rmse1)
plot(rmse1)
