## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
View(stations)
View(starttime)
View(stoptime)
starttime <- count(starttime)
View(starttime)
subset(bike, (bike$StopHour==0, bike$StartDay==1, bike$StartMonth==8, bike$StartYear==2015))
subset(bike, (bike$StopHour==0 & bike$StartDay==1 & bike$StartMonth==8 & bike$StartYear==2015))
nrwo(subset(bike, (bike$StopHour==0 & bike$StartDay==1 & bike$StartMonth==8 & bike$StartYear==2015)))]
nrwo(subset(bike, (bike$StopHour==0 & bike$StartDay==1 & bike$StartMonth==8 & bike$StartYear==2015)))
nrow(subset(bike, (bike$StopHour==0 & bike$StartDay==1 & bike$StartMonth==8 & bike$StartYear==2015)))
## Calcuate the frequencies
starttime <- count(starttime)
stoptime <- count(stoptime)
View(stoptime)
remove(starttime)
remove(stoptime)
## Calcuate the frequencies
starttime <- count(starttime)
stoptime <- count(stoptime)
## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
## Calcuate the frequencies
starttime <- count(starttime)
stoptime <- count(stoptime)
## Aggregation
aggregate_starttime <- aggregate(freq ~ StartDay + StartMonth + StartYear, data = starttime, sum)
aggregate_stoptime <- aggregate(freq ~ StopDay + StopMonth + StopYear, data = stoptime, sum)
View(aggregate_starttime)
subset(bike, (bike$StartDay==1 & bike$StartMonth==7 & bike$StartYear==2015))
nrow(subset(bike, (bike$StartDay==1 & bike$StartMonth==7 & bike$StartYear==2015)))
View(starttime)
new <- subset(bike, (bike$StartDay==1 & bike$StartMonth==7 & bike$StartYear==2015))
View(new)
View(stoptime)
View(aggregate_stoptime)
table(new$StopDay)
### Weather
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv")
View(stations)
View(weather_holidays)
## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
names(starttime)
## Calcuate the frequencies
starttime <- count(starttime, c('StarHour','StartDay','StartMonth','StartYear'))
stoptime <- count(stoptime,  c('StarHour','StartDay','StartMonth','StartYear'))
## Calcuate the frequencies
starttime <- count(starttime, c('StarHour','StartDay','StartMonth','StartYear'))
stoptime <- count(stoptime,  c('StopHour','StoptDay','StopMonth','StopYear'))
remove(starttime,stoptime)
starttime <- count(starttime, c('StarHour','StartDay','StartMonth','StartYear'))
## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
starttime <- count(starttime, c('StarHour','StartDay','StartMonth','StartYear'))
starttime <- count(starttime, c('StartHour','StartDay','StartMonth','StartYear'))
stoptime <- count(stoptime,  c('StopHour','StoptDay','StopMonth','StopYear'))
stoptime <- count(stoptime,  c('StopHour','StopDay','StopMonth','StopYear'))
remove(starttime,stoptime)
## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
## Calcuate the frequencies
starttime <- count(starttime, c('StartHour','StartDay','StartMonth','StartYear'))
stoptime <- count(stoptime,  c('StopHour','StopDay','StopMonth','StopYear'))
View(starttime)
## Aggregation
aggregate_starttime <- aggregate(freq ~ StartDay + StartMonth + StartYear, data = starttime, sum)
aggregate_stoptime <- aggregate(freq ~ StopDay + StopMonth + StopYear, data = stoptime, sum)
names(weather_holidays)
holiday <- weather_holidays[, c('Day','Month','Year','Holiday')]
View(holiday)
## Merging them by
starttime_holiday <- merge(starttime, holiday, by.x = c('StartDay','StartMonth','StartYear'), by.y = c('Day','Month','Year'))
View(starttime_holiday)
stoptime_holiday <- merge(stoptime, holiday, by.x = c('StopDay','StopMonth','StopYear'), by.y = c('Day','Month','Year'))
stoptime_holiday <- merge(stoptime, holiday, by.x = c('StopDay','StopMonth','StopYear'), by.y = c('Day','Month','Year'))
is.na(stoptime)
any(is.na(stoptime))
any(is.na(holiday))
stoptime_holiday <- merge(stoptime, holiday, by.x = c('StopDay','StopMonth','StopYear'), by.y = c('Day','Month','Year'))
starttime_holiday <- merge(starttime, holiday, by.x = c('StartDay','StartMonth','StartYear'), by.y = c('Day','Month','Year'))
View(stoptime_holiday)
str(starttime)
str(stoptime)
## Merging them by
starttime_holiday <- merge(starttime, holiday, by.x = c('StartDay','StartMonth','StartYear'), by.y = c('Day','Month','Year'))
stoptime_holiday <- merge(stoptime, holiday, by.x = c('StopDay','StopMonth','StopYear'), by.y = c('Day','Month','Year'))
View(stoptime)
View(stoptime_holiday)
View(starttime_holiday)
which(stoptime_holiday %in% stoptime)
stoptime[which(stoptime_holiday %in% stoptime),]
stoptime[which(stoptime_holiday %in% stoptime),]
stoptime[which(stoptime_holiday %in% stoptime),]
stoptime_holiday %in% stoptime
stoptime %in% stoptime_holiday
stoptime ==stoptime_holiday
str(holiday)
weather <- read.csv("weather.csv")
holidays <- read.csv("holidays.csv")
set_up_features <- function(df) {
### Start Time
df$date <- strptime(df$date, format="%Y-%m-%d")
df$Day <-  as.factor(df$date$mday)
df$Weekend <- as.factor(df$date$wday)
df$Month <- as.factor(df$date$mon+1) ## starts from 0
df$Year <- as.factor(df$date$year + 1900)
df
}
weather <- read.csv("weather.csv")
weather <- set_up_features(weather)
weather$Weekend = as.integer(weather$Weekend)
weather$Weekend= recode(weather$Weekend,"c(1,7)='yes';else='no'")
weather$Weekend= recode(weather$Weekend,"c(1,7)='yes';else='no'")
levels(weather$Types)[levels(weather$Types)=="Fog"] <- "Sunny"
levels(weather$Types)[levels(weather$Types)=="Fog-Rain"] <- "Rain"
levels(weather$Types)[levels(weather$Types)=="Fog-Rain-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Fog-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Rain-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Rain-Thunderstorm"] <- "Rain"
weather$Types <- as.factor(weather$Types)
weather$Holiday <- ifelse((weather$date %in% holidays$date) | (weather$Weekend == 'yes'),1,0)
weather_holidays <- weather[-1]
str(weather_holidays)
weather$Holiday <- as.factor(weather$Holiday)
str(weather_holidays)
weather$Holiday <- as.factor(weather$Holiday)
weather_holidays <- weather[-1]
str(weather_holidays)
write.csv(weather_holidays, file = "weather_holiday.csv", row.names = FALSE)
str(weather_holidays)
library(lubridate)
library(dplyr)
## Read The data
### stations data
stations <- read.csv("HealthyRideStations2015.csv")
## 2015 Q3
rentalQ153 <- read.csv("HealthyRideRentals 2015 Q3.csv",na.strings= c("999", "NA", " ", ""))
### Change the data
rentalQ153$StartTime <- strptime(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
rentalQ153$StopTime <- strptime(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StartTime <- as.POSIXct(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StopTime <- as.POSIXct(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
## 2015 Q4
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRideRentals 2015 Q4.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
# numSheets <- sheetCount(excelFile, verbose=TRUE)
#
# for ( i in 1:numSheets) {
#   mySheet <- read.xls(excelFile, sheet=i)
#   write.csv(mySheet, file=paste(i, "csv", sep="."), row.names=FALSE)
# }
rentalQ154 <- read.csv("HealthyRideRentals 2015 Q4.csv", na.strings= c("999", "NA", " ", ""))
rentalQ154$StartTime <- strptime(rentalQ154$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ154$StopTime <- strptime(rentalQ154$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ154$StartTime <- as.POSIXct(rentalQ154$StartTime)
# rentalQ154$StopTime <- as.POSIXct(rentalQ154$StopTime)
## 2016 Q1
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRide Rentals 2016 Q1.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
#
#
# mySheet <- read.xls(excelFile)
# write.csv(mySheet, file=paste("HealthyRide Rentals 2016 Q1","csv", sep="."), row.names=FALSE)
rentalQ161 <- read.csv("HealthyRide Rentals 2016 Q1.csv", na.strings= c("999", "NA", " ", ""))
## Make sure they have the same colunm names
names(rentalQ161) <- c(names(rentalQ153))
rentalQ161$StartTime <- strptime(rentalQ161$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ161$StopTime <- strptime(rentalQ161$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Starttime <- as.POSIXct(rentalQ161$Starttime,format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Stoptime <- as.POSIXct(rentalQ161$Stoptime,format="%Y-%m-%d %H:%M:%S")
## binding the data together
bike <- rbind(rentalQ153,rentalQ154,rentalQ161)
bike$TripId <- as.factor(bike$TripId)
bike$BikeId <- as.factor(bike$BikeId)
bike$FromStationId <- as.factor(bike$FromStationId)
bike$ToStationId <- as.factor(bike$ToStationId)
## Splitting the date
# bike <- bike %>% mutate(
#   year = format(as.POSIXct(StartTime), format = "%Y"),
#   month = format(as.POSIXct(StartTime), format = "%m"),
#   day = format(as.POSIXct(StartTime), format = "%d"),
#   hour = format(as.POSIXct(StartTime), format= "%H")
# )
set_up_features <- function(df) {
### Start Time
df$StartTime <- strptime(df$StartTime, format="%Y-%m-%d %H:%M:%S")
df$StartHour <- as.factor(df$StartTime$hour)
df$StartDay <-  as.factor(df$StartTime$mday)
df$StartWday <- as.factor(df$StartTime$wday)
df$StartMonth <- as.factor(df$StartTime$mon+1) ## starts from 0
df$StartYear <- as.factor(df$StartTime$year + 1900)
### Stop Time
df$StopTime <- strptime(df$StopTime, format="%Y-%m-%d %H:%M:%S")
df$StopHour <- as.factor(df$StopTime$hour)
df$StopDay <-  as.factor(df$StopTime$mday)
df$StopWday <- as.factor(df$StopTime$wday)
df$StopMonth <- as.factor(df$StopTime$mon+1) ## starts from 0
df$StopYear <- as.factor(df$StopTime$year + 1900)
df
}
bike <- set_up_features(bike)
## Make a summeary for the missing values
na_data <- sapply(bike, function(x) sum(length(which(is.na(x)))))
na_data
bike$FromStationName[which(is.na(bike$FromStationId))]
bike$FromStationId[which(is.na(bike$FromStationName))]
## I guss we should just drop them
# newBike <- bike %>%
#   select(TripId,day, month, hour) %>%
#   filter(day==1, month == 7) %>%
#   group_by(hour) %>%
#   summarise(total = n())
### Remove all NA values
bike <- na.omit(bike)
### Weather
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv")
str(weather_holidays)
### Weather
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv", stringsAsFactors = TRUE)
weather_holidays
str(weather_holidays)
remove(weather_holidays)
### Weather
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv", stringsAsFactors = TRUE)
str(weather_holidays)
weather_holiday <- read.csv("~/Documents/Master/Data Mining/Project/Pittsburgh-Bike-Share-Project/data/weather_holiday.csv")
View(weather_holiday)
str(weather_holiday)
weather <- read.csv("weather.csv")
holidays <- read.csv("holidays.csv")
set_up_features <- function(df) {
### Start Time
df$date <- strptime(df$date, format="%Y-%m-%d")
df$Day <-  as.factor(df$date$mday)
df$Weekend <- as.factor(df$date$wday)
df$Month <- as.factor(df$date$mon+1) ## starts from 0
df$Year <- as.factor(df$date$year + 1900)
df
}
weather <- set_up_features(
weather$Weekend = as.integer(weather$Weekend)
## coded as weekend == 1 others == 0
## Weekends == 1, WorkDays == 0
weather$Weekend= recode(weather$Weeke
weather$Weekend = as.integer(weather$Weekend)
source('~/Documents/Master/Data Mining/Project/Pittsburgh-Bike-Share-Project/weather_holiday.R')
## coded as weekend == 1 others == 0
source('~/Documents/Master/Data Mining/Project/Pittsburgh-Bike-Share-Project/weather_holiday.R')
weather <- read.csv("weather.csv")
holidays <- read.csv("holidays.csv")
set_up_features <- function(df) {
### Start Time
df$date <- strptime(df$date, format="%Y-%m-%d")
df$Day <-  as.factor(df$date$mday)
df$Weekend <- as.factor(df$date$wday)
df$Month <- as.factor(df$date$mon+1) ## starts from 0
df$Year <- as.factor(df$date$year + 1900)
df
}
weather <- set_up_features(weather)
weather$Weekend = as.integer(weather$Weekend)
weather$Weekend= recode(weather$Weekend,"c(1,7)='yes';else='no'")
levels(weather$Types)[levels(weather$Types)=="Fog"] <- "Sunny"
levels(weather$Types)[levels(weather$Types)=="Fog-Rain"] <- "Rain"
levels(weather$Types)[levels(weather$Types)=="Fog-Rain-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Fog-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Rain-Snow"] <- "Snow"
levels(weather$Types)[levels(weather$Types)=="Rain-Thunderstorm"] <- "Rain"
weather$Types <- as.factor(weather$Types)
weather$Types <- as.factor(weather$Types)
weather$Holiday <- ifelse((weather$date %in% holidays$date) | (weather$Weekend == 'yes'),1,0)
weather$Holiday <- as.factor(weather$Holiday)
weather_holidays <- weather[-1]
str(weather_holidays)
write.csv(weather_holidays, file = "weather_holiday.csv", row.names = FALSE)
library(lubridate)
library(dplyr)
## Read The data
### stations data
stations <- read.csv("HealthyRideStations2015.csv")
## 2015 Q3
rentalQ153 <- read.csv("HealthyRideRentals 2015 Q3.csv",na.strings= c("999", "NA", " ", ""))
### Change the data
rentalQ153$StartTime <- strptime(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
rentalQ153$StopTime <- strptime(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StartTime <- as.POSIXct(rentalQ153$StartTime, format="%m/%d/%Y %H:%M")
# rentalQ153$StopTime <- as.POSIXct(rentalQ153$StopTime, format="%m/%d/%Y %H:%M")
## 2015 Q4
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRideRentals 2015 Q4.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
# numSheets <- sheetCount(excelFile, verbose=TRUE)
#
# for ( i in 1:numSheets) {
#   mySheet <- read.xls(excelFile, sheet=i)
#   write.csv(mySheet, file=paste(i, "csv", sep="."), row.names=FALSE)
# }
rentalQ154 <- read.csv("HealthyRideRentals 2015 Q4.csv", na.strings= c("999", "NA", " ", ""))
rentalQ154$StartTime <- strptime(rentalQ154$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ154$StopTime <- strptime(rentalQ154$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ154$StartTime <- as.POSIXct(rentalQ154$StartTime)
# rentalQ154$StopTime <- as.POSIXct(rentalQ154$StopTime)
## 2016 Q1
## Converting from xls to csv
# require(gdata)
# ## install support for xlsx files
# installXLSXsupport()
# excelFile <- ("./HealthyRide Rentals 2016 Q1.xlsx")
# ## note that the perl scripts that gdata uses do not cope well will tilde expansion
# ## on *nix machines. So use the full path.
#
#
# mySheet <- read.xls(excelFile)
# write.csv(mySheet, file=paste("HealthyRide Rentals 2016 Q1","csv", sep="."), row.names=FALSE)
rentalQ161 <- read.csv("HealthyRide Rentals 2016 Q1.csv", na.strings= c("999", "NA", " ", ""))
## Make sure they have the same colunm names
names(rentalQ161) <- c(names(rentalQ153))
rentalQ161$StartTime <- strptime(rentalQ161$StartTime, format="%Y-%m-%d %H:%M:%S")
rentalQ161$StopTime <- strptime(rentalQ161$StopTime, format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Starttime <- as.POSIXct(rentalQ161$Starttime,format="%Y-%m-%d %H:%M:%S")
# rentalQ161$Stoptime <- as.POSIXct(rentalQ161$Stoptime,format="%Y-%m-%d %H:%M:%S")
## binding the data together
bike <- rbind(rentalQ153,rentalQ154,rentalQ161)
bike$TripId <- as.factor(bike$TripId)
bike$BikeId <- as.factor(bike$BikeId)
bike$FromStationId <- as.factor(bike$FromStationId)
bike$ToStationId <- as.factor(bike$ToStationId)
## Splitting the date
# bike <- bike %>% mutate(
#   year = format(as.POSIXct(StartTime), format = "%Y"),
#   month = format(as.POSIXct(StartTime), format = "%m"),
#   day = format(as.POSIXct(StartTime), format = "%d"),
#   hour = format(as.POSIXct(StartTime), format= "%H")
# )
set_up_features <- function(df) {
### Start Time
df$StartTime <- strptime(df$StartTime, format="%Y-%m-%d %H:%M:%S")
df$StartHour <- as.factor(df$StartTime$hour)
df$StartDay <-  as.factor(df$StartTime$mday)
df$StartWday <- as.factor(df$StartTime$wday)
df$StartMonth <- as.factor(df$StartTime$mon+1) ## starts from 0
df$StartYear <- as.factor(df$StartTime$year + 1900)
### Stop Time
df$StopTime <- strptime(df$StopTime, format="%Y-%m-%d %H:%M:%S")
df$StopHour <- as.factor(df$StopTime$hour)
df$StopDay <-  as.factor(df$StopTime$mday)
df$StopWday <- as.factor(df$StopTime$wday)
df$StopMonth <- as.factor(df$StopTime$mon+1) ## starts from 0
df$StopYear <- as.factor(df$StopTime$year + 1900)
df
}
bike <- set_up_features(bike)
## Make a summeary for the missing values
na_data <- sapply(bike, function(x) sum(length(which(is.na(x)))))
na_data
bike$FromStationName[which(is.na(bike$FromStationId))]
bike$FromStationId[which(is.na(bike$FromStationName))]
## I guss we should just drop them
### Remove all NA values
bike <- na.omit(bike)
### Weather
# weather <- read.csv("weather.csv")
weather_holidays <- read.csv("weather_holiday.csv", stringsAsFactors = TRUE)
str(weather_holidays)
weather_holidays <- as.factor(weather_holidays$Day)
weather_holidays <- as.factor(weather_holidays$Month)
weather_holidays <- as.factor(weather_holidays$Year)
weather_holidays <- as.factor(weather_holidays$Holiday)
weather_holidays <- as.factor(weather_holidays$Day)
str(weather_holidays)
weather_holidays <- read.csv("weather_holiday.csv", stringsAsFactors = TRUE)
str(weather_holidays)
weather_holidays$Day <- as.factor(weather_holidays$Day)
weather_holidays$Month <- as.factor(weather_holidays$Month)
weather_holidays$Year <- as.factor(weather_holidays$Year)
weather_holidays$Holiday <- as.factor(weather_holidays$Holiday)
str(weather_holidays)
## Calcuate the counts
# by Hour, Day, Month, Year
starttime <- bike[,c(11,12,14,15)]
stoptime <- bike[,c(16,17,19,20)]
str(starttime)
## Calcuate the frequencies
starttime <- count(starttime, c('StartHour','StartDay','StartMonth','StartYear'))
stoptime <- count(stoptime,  c('StopHour','StopDay','StopMonth','StopYear'))
str(starttime)
## Aggregation
aggregate_starttime <- aggregate(freq ~ StartDay + StartMonth + StartYear, data = starttime, sum)
aggregate_stoptime <- aggregate(freq ~ StopDay + StopMonth + StopYear, data = stoptime, sum)
## Get the weather and holidays
holiday <- weather_holidays[, c('Day','Month','Year','Holiday')]
str(holiday)
starttime_holiday <- merge(starttime, holiday, by.x = c('StartDay','StartMonth','StartYear'), by.y = c('Day','Month','Year'))
stoptime_holiday <- merge(stoptime, holiday, by.x = c('StopDay','StopMonth','StopYear'), by.y = c('Day','Month','Year'))
stoptime - stoptime_holiday
stoptime[!stoptime_holiday]
require(sqldf)
require(sqldf)
install.packages("sqldf")
require(sqldf)
require(sqldf)
sqldf("select * from stoptime except select * from stoptime_holiday")
setdiff(stoptime, stoptime_holiday)
View(stoptime)
newStoptime <- stoptime[,-1]
setdiff(newStoptime, stoptime_holiday)
setdiff(starttime, starttime_holiday)
BigDF[ !(BigDF$ID %in% SmallDF$ID), ]
stoptime[!(stoptime %in% stoptime_holiday), ]
stoptime[!(stoptime_holiday %in% stoptime), ]
stoptime[!(stoptime %in% stoptime_holiday), ]
newStoptime <- stoptime[!(stoptime %in% stoptime_holiday), ]
newStoptime <- stoptime_holiday[!(stoptime %in% stoptime_holiday), ]
newStoptime <- stoptime_holiday[!(stoptime_holiday %in% stoptime), ]
View(stoptime)
View(stoptime_holiday)
table(stoptime$StopDay)
table(stoptime_holiday$StopDay)
table(stoptime$StopMonth)
table(stoptime_holiday$StopMonth)
table(stoptime$StopYear)
table(stoptime_holiday$StopYear)
table(stoptime$StopHour)
table(stoptime_holiday$StopHour)
subset(stoptime_holiday, StopDay==1)
subset(stoptime_holiday, StopDay==1 & StopMonth == 4 & StopYear==2016)
subset(stoptime_holiday, StopDay==1 & StopMonth == 4 & StopYear == 2016)
subset(stoptime, StopDay==1 & StopMonth == 4 & StopYear == 2016)
View(bike)
subset(bike, StartMonth == 4, StartYear==2016)
subset(bike, StopMonth == 4, StopYear==2016)
subset(stoptime, StopDay==1 & StopMonth == 4 & StopYear == 2016)
subset(bike, StopDay==1 & StopMonth == 4 & StopYear == 2016)
nrow(subset(bike, StopDay==1 & StopMonth == 4 & StopYear == 2016))
subset(bike, StopMonth == 4 & StopYear==2016)
nrow(subset(bike, StopMonth == 4 & StopYear==2016))
starttime_holiday_split <- split(starttime_holiday, starttime_holiday$Holiday)
starttime_holiday_split
starttime_holiday_split[[2]]
starttime_holiday_split[[1]]
starttime_holiday_split[[2]]
starttime_holiday_split[[1]]
starttime_holiday_split[[2]]
starttime_holiday_split[[1]]
starttime_holiday_no <- starttime_holiday_split[[1]]
starttime_holiday_yes <- starttime_holiday_split[[2]]
starttime_holiday_yes
stoptime_holiday_split <- split(stoptime_holiday, stoptime_holiday$Holiday)
stoptime_holiday_split[[2]]
stoptime_holiday_no <- stoptime_holiday_split[[1]]
stoptime_holiday_yes <- stoptime_holiday_split[[2]]
stoptime_holiday_yes
stoptime_holiday_yes
stoptime_holiday_no
View(stoptime_holiday_yes)
### aggregating with hour
starttime_holiday_yes_hour <- aggregate(freq ~ StartHour , data = starttime_holiday_yes, sum)
starttime_holiday_no_hour <- aggregate(freq ~ StartHour, data = starttime_holiday_no, sum)
stoptime_holiday_yes_hour <- aggregate(freq ~ StopHour, data = stoptime_holiday_yes, sum)
stoptime_holiday_no_hour <- aggregate(freq ~ StopHour, data = stoptime_holiday_no, sum)
View(starttime_holiday_no_hour)
View(starttime_holiday_yes_hour)
View(bike)
View(aggregate_stoptime)
View(aggregate_starttime)
View(aggregate_stoptime)
View(aggregate_starttime)
startstoptime_DMY <- merge(aggregate_starttime,aggregate_stoptime, by.x = "StartDay","StartMonth","StartYear", by.y = "StopDay","StopMonth","StopYear")
startstoptime_DMY <- merge(aggregate_starttime,aggregate_stoptime, by.x = c("StartDay","StartMonth","StartYear"), by.y = c("StopDay","StopMonth","StopYear"))
View(starttime_holiday_yes_hour)
startstop_holiday_yes_hour <- merge(starttime_holiday_yes_hour, stoptime_holiday_yes_hour, by.x = "StartHour", by.y = "StopHour")
startstop_holiday_no_hour <- merge(starttime_holiday_no_hour, stoptime_holiday_no_hour, by.x = "StartHour", by.y = "StopHour")
View(startstop_holiday_yes_hour)
View(startstoptime_DMY)
startstoptime_DMY <- rename(startstoptime_DMY, c("freq.x"="In", "freq.y"="Out"))
## Renaming
startstoptime_DMY <- rename(startstoptime_DMY, c("freq.x"="In", "freq.y"="Out"))
startstop_holiday_yes_hour <- rename(startstop_holiday_yes_hour,  c("freq.x"="In", "freq.y"="Out"))
startstop_holiday_no_hour <- rename(startstop_holiday_no_hour,  c("freq.x"="In", "freq.y"="Out"))
startstop_holiday_yes_hour <- rename(startstop_holiday_yes_hour,  c("freq.x"="In", "freq.y"="Out"))
startstop_holiday_no_hour <- rename(startstop_holiday_no_hour,  c("freq.x"="In", "freq.y"="Out"))
View(startstop_holiday_no_hour)
